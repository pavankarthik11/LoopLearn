import { DailyEventObject } from '@daily-co/daily-js';
interface UseRecordingArgs {
    onRecordingData?(ev: DailyEventObject<'recording-data'>): void;
    onRecordingError?(ev: DailyEventObject<'recording-error'>): void;
    onRecordingStarted?(ev: DailyEventObject<'recording-started'>): void;
    onRecordingStopped?(ev: DailyEventObject<'recording-stopped'>): void;
}
export declare const useRecording: ({ onRecordingData, onRecordingError, onRecordingStarted, onRecordingStopped, }?: UseRecordingArgs) => {
    startRecording: (options?: import("@daily-co/daily-js").DailyStreamingOptions<"recording", "start"> | undefined) => void;
    stopRecording: (options?: {
        instanceId: string;
    } | undefined) => void;
    updateRecording: (options: {
        layout?: import("@daily-co/daily-js").DailyStreamingLayoutConfig<"update"> | undefined;
        instanceId?: string | undefined;
    }) => void;
    error?: boolean | undefined;
    isLocalParticipantRecorded: boolean;
    isRecording: boolean;
    layout?: import("@daily-co/daily-js").DailyStreamingLayoutConfig<"start"> | undefined;
    local?: boolean | undefined;
    recordingId?: string | undefined;
    recordingStartedDate?: Date | undefined;
    startedBy?: string | undefined;
    type?: string | undefined;
};
export {};
